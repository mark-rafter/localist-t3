// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // todo: sort out later, seems kinda buggy atm
  //extensions = [pg_stat_statements, pgcrypto, pgjwt, pgsodium, plpgsql, postgis, uuid_ossp(map: "uuid-ossp")]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Location {
  id   Int     @id @default(autoincrement())
  lat  Decimal
  long Decimal
  User User[]
  //coords Unsupported("geometry(Point)")?

  //@@index([coords], name: "coords_index", type: Gist)
  @@map("location")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  location       Location  @relation(fields: [userLocationId], references: [id])
  userLocationId Int

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  brand     String
  size      ItemSize
  price     Int
  images    String[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  viewCount Int      @default(0) @map("view_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("post")
}

enum ItemSize {
  xs
  small
  medium
  large
  xl

  @@map("item_size")
}
