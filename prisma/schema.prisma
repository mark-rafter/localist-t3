// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true
  createInputTypes                 = false
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  createOptionalDefaultValuesTypes = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  lat           Float        @default(51.5)
  long          Float        @default(0.0)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  ratedBy       UserRating[] @relation("ratedBy")
  ratingsFor    UserRating[] @relation("ratingFor")

  @@map("user")
}

model UserRating {
  id            String @id @default(cuid())
  score         Int
  ratedById     String @map("rated_by_id")
  ratingForId   String @map("rating_for_id")
  ratedByUser   User   @relation("ratedBy", fields: [ratedById], references: [id], onDelete: Cascade)
  ratingForUser User   @relation("ratingFor", fields: [ratingForId], references: [id], onDelete: Cascade)

  @@map("user_rating")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  size      ItemSize
  price     Int
  details   Json?
  images    String[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  viewCount Int      @default(0) @map("view_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("post")
}

enum ItemSize {
  xs
  small
  medium
  large
  xl

  @@map("item_size")
}
